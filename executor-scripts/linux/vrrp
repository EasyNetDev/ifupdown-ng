#!/bin/sh
# This executor is responsible for setting up the Virtual Router Redundancy Protocol (VRRP) overlay interfaces.
#
# Copyright (C) 2022 EasyNetDev <devel@easynet.dev>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# This software is provided 'as is' and without any warranty, express or
# implied. In no event shall the authors be liable for any damages arising
# from the use of this software.
#
# Sat, 09 Jul 2022 11:12:31 +0200
#  -- EasyNetDev <devel@easynet.dev>
#
# This executor will create for each VRRP ID in the list 2 new MACVLAN interfaces to be controlled by FRRouting
# vrrpd daemon.
# The name of the interfaces are generated by a prefix "vrrp${IP_VERSION}-" then a hex value of calculated CRC32 of 
# from string "${IFACE}-${VRID}-${IP_VERSION}". 
# ${IFACE} is the interface under we want the VRRP, ${VRID} is the VRRP ID with a value between 1 and 255,
# ${IP_VERSION} is 4 or 6 which is the IP version, then the CRC32 value is printed in hex and added to the
# name of the VRRP interface.
#
# This naming will assure that we will have the same names for VRRP interfaces each time we are restarting
# the main interface or a reboot of machine and will guarantees that we will not exceed 14 characters for the
# interface name.
#
# Known options for the main interface are:
#
# IF_VRRP_ID           VRID list to create the interfaces only
# IF_VRRP_ADDRESS      VRID list or VRID + IP list to create the interfaces and add IPs
#

[ -n "$VERBOSE" ] && set -x

################################################################################
#                        VRRP management functions                             #
################################################################################


addr_family() {
	if [ "$1" != "${1#*[0-9].[0-9]}" ]; then
		echo "IPv4"
	elif [ "$1" != "${1#*:[0-9a-fA-F]}" ]; then
		echo "IPv6"
	else
		echo ""
	fi
}

is_vrid() {
	#local VRID=$1
	if [ -z "$(echo $1 |sed 's/\([0-9]\{1,3\}\)\(.*\)/\2/g')" ]; then
		if [ $1 -gt 0 -a $1 -le 255 ]; then
		    return 0
		else
		    echo "VRRP ID $1 is invalid! VRRP ID must have values between 1 and 255!"
		    return 1
		fi
	else
		# Could be IPv4 or IPv6 address
		return 2
	fi
}

get_vrid_list() {
	while [ $1 ]; do
		if is_vrid $1; then
			VRID_LIST=${VRID_LIST# }" $1"
		fi
		shift
	done
}

crc32_hex() {
	printf "%08x" $(echo $1 | cksum | cut -f1 -d" ")
}

get_vrrp_name_mac() {
	# VRRP interface name is compound in form vrrp${IP_VERSION}-${CRC32}.
	# CRC32 is calculated from the string ${IFACE}-${VRID}-${IP_VERSION}, 
	# where IFACE is the physical interface, VRID is the VRRP ID for which 
	# we want to compute the interface and IP_VERSION is 4 or 6 for IPv4 respectively IPv6.

	VRRP4_IFACE="vrrp4-$(crc32_hex ${IFACE}-$1-4)"
	VRRP6_IFACE="vrrp6-$(crc32_hex ${IFACE}-$1-6)"

	# Compute the MAC address for each interface
	VRRP4_MAC="00:00:5e:00:01:"$(printf "%02x\n" $1)
	VRRP6_MAC="00:00:5e:00:02:"$(printf "%02x\n" $1)

}

lookup_vrid() {
	while [ $1 ]; do
	    echo $1
	    shift
	done
}

add_vrid_addr() {

	# We will use the VRRP4_IFACE and VRRP6_IFACE from pre-up loop.
	local i
	local VRID_ADDR_LIST=""
	local VRID_FOUND=0
	# Get the IP address list for the specific VRID
	for i in $IF_VRRP_ADDRESS; do
	    if is_vrid $i; then
		if [ "$i" -eq $1 ]; then
			VRID_FOUND=1
		else
			VRID_FOUND=0
		fi
	    elif [ "$VRID_FOUND" = "1" ]; then
		if [ "$(addr_family $i)" = "IPv4" ]; then
			ip -4 add add $i dev $VRRP4_IFACE
		elif [ "$(addr_family $i)" = "IPv6" ]; then
			ip -6 add add $i dev $VRRP6_IFACE
		fi
	    fi
	done
}


# Ignore depend and create stages for moment

if [ "$PHASE" = "depend" -o "$PHASE" = "create" ]; then
    exit 0
fi

date >> /tmp/vrrp.txt
export >> /tmp/vrrp.txt

if [ ! "$IF_VRRP_ID" -a ! "$IF_VRRP_ADDRESS" ]; then
    exit 0
fi

VRID_LIST=""

if [ "$IF_VRRP_ADDRESS" ]; then
    get_vrid_list $IF_VRRP_ADDRESS
else
    get_vrid_list $IF_VRRP_IDS
fi

case "$PHASE" in
depend)
	# Not used by VRRP
	exit 0
	;;

create)
	# Not used by VRRP
	exit 0
	;;

pre-up)
	# VRRP interfaces should be created in pre-up stage, becase if you have a bond, bridge or teaming interfaces, these are created in "create" stage.
	# Check if $IFACE exists. If not, try skip.
	[ -d /sys/class/net/$IFACE ] || exit 0

	VRRP4_IFACE=""
	VRRP6_IFACE=""
	VRRP4_MAC=""
	VRRP6_MAC=""
	for VRID in $VRID_LIST; do
		get_vrrp_name_mac $VRID

		if [ ! -d "/sys/class/net/$VRRP4_IFACE" ]; then
			# Create MACVLAN interfaces for IPv4
			${MOCK} ip link add link $IFACE name ${VRRP4_IFACE} addrgenmode random type macvlan mode bridge
			${MOCK} ip link set dev $VRRP4_IFACE address $VRRP4_MAC
			# In case of boot, we must set protodown to on until FRRouting will takeover the control of the interface
			${MOCK} ip link set dev $VRRP4_IFACE protodown on
			### Always disable IPv6 on VRRP IPv4 interface
			echo 1 > /proc/sys/net/ipv6/conf/$VRRP4_IFACE/disable_ipv6
			# In case we have VRF, add VRRP interface under VRF
			if [ "$IF_VRF_MEMBER" ]; then
			    ${MOCK} ip link set $VRRP4_IFACE master $IF_VRF_MEMBER
			fi
			${MOCK} ip link set dev $VRRP4_IFACE up
		fi

		if [ ! -d "/sys/class/net/$VRRP6_IFACE" ]; then
			# Create MACVLAN interfaces for IPv4
			${MOCK} ip link add link $IFACE name ${VRRP6_IFACE} addrgenmode random type macvlan mode bridge
			${MOCK} ip link set dev $VRRP6_IFACE address $VRRP6_MAC
			# In case of boot, we must set protodown to on until FRRouting will takeover the control of the interface
			${MOCK} ip link set dev $VRRP6_IFACE protodown on
			### IPv6 tunning
			# Disable autoconf and accept_ra on VRRP IPv6 MACVLAN
			#echo "0" > /proc/sys/net/ipv6/conf/$VRRP6_IF/autoconf
			#echo "0" > /proc/sys/net/ipv6/conf/$VRRP6_IF/accept_ra
			#echo "0" > /proc/sys/net/ipv6/conf/$VRRP6_IF/accept_dad
			# In case we have VRF, add VRRP interface under VRF
			if [ "$IF_VRF_MEMBER" ]; then
			    ${MOCK} ip link set $VRRP6_IFACE master $IF_VRF_MEMBER
			fi
			${MOCK} ip link set dev $VRRP6_IFACE up
		fi

		# Add IP addresses to VRRP interfaces, in case we have.
		if [ "$IF_VRRP_ADDRESS" ]; then
			VRID_ADDR_LIST="$(add_vrid_addr $VRID)"
		fi
	done
	;;

post-down)
	# VRRP interfaces should be destroied in post-down, becase if you have a bond, bridge or teaming interfaces, these are destroied in "destroy" stage.
	[ -d /sys/class/net/$IFACE ] || exit 0

	VRRP4_IFACE=""
	VRRP6_IFACE=""
	VRRP4_MAC=""
	VRRP6_MAC=""
	for i in $VRID_LIST; do
		# Check if VRRP interface exist. In case exist, exit
		get_vrrp_name_mac $i
		
		if [ -d "/sys/class/net/$VRRP4_IFACE" ]; then
			${MOCK} ip link del ${VRRP4_IFACE} type macvlan
		fi

		if [ -d "/sys/class/net/$VRRP6_IFACE" ]; then
			${MOCK} ip link del ${VRRP6_IFACE} type macvlan
		fi

	done
	;;

destroy)
	;;
esac
